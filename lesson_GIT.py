# Система контроля версий - это система, записывающая
# изменения в файл или набор файлов в течение времени.

''''''
# Существует три вида систем контроля версий:
# 1) Локальные:
#              Представляют собой систему с простой базой данных,
#              которая хранит записи о всех изменениях в файлах,
#              осуществляя тем самым контроль ревизий.

                        # Local 
#              Checkout           Version Database 
#              (File) -> ->  -> ->  (Version2)
#                                        \/
#                                        \/
#                                   (Version2)
#                                        \/
#                                        \/
#                                   (Version1)     

    
# 2) Централизованные:
#                     Представляет систему контроля версий 
#                     для взаимодействия с другими разработчиками.
                    
#                     Такие системы используют единственный сервер,
#                     содержащий все версии файлов и некоторое количество клиентов,
#                     которые получают файлы из этого централизованного хранилеще.
                  #   Минус в том, что если сервер выйдет из строя, то никто не сможет использовать 
                  #   контроль версий для сохранения изменений.

                              # Central VCS Server 

#              Computer A   ->   -> Version Database  <-  <-  Computer B
#                  (File)           (Version2)                  (File)
# #                                      \/
#                                        \/
#                                   (Version2)
#                                        \/
#                                        \/
#                                   (Version1) 
#  
# 3) Распределенные:
#                   Они подразумевают, что клиент выкачает себе весь репозиторий 
#                   целиком заместо выкачки конкретных интересующих клиента файлов.
#                   Если умрет любая копия репозитория, то это не приведет к потере 
#                   кодовой базы, поскольку она может быть восстановлена с компьютера 
#                   любого разработчика.


 #                                 Server Computer
 #                              /                   \
#                              /  Version Database   \
#                             /      (Version2)       \
# #                          /            \/           \
#                           /             \/            \ 
#                          /         (Version2)          \
#                         /               \/              \
#                        /                \/               \
#                       /            (Version1)             \
#                      /                                     \
#                     /                                       \
#                Computer A <-----------------------------> Computer B
#             Version Database                          Version Database
#               (Version2)                                  (Version2)                                   
#                   \/                                          \/
#                   \/                                          \/
#               (Version2)                                  (Version2)    
#                   \/                                          \/
#                   \/                                          \/
#               (Version1)                                  (Version1)
#
#
#
# GIT - Это распределенная система контроля версий,
#       записывающая изменения в файл или набор файлов 
#       в течение времени и позволяющая вернуться позже 
#       к определенной версии.
        

''''''
# У GIT есть три основных состояния, 
# в которых могут находиться файлы:

# 1) Зафиксированное (committed)
# 2) Измененнное (modified)
# 3) Подготовленное (staged)




'Зафиксированное (committed)'
#значит, что файл уже сохранен в локальной базе.

'Измененнное (modified)'
# это файлы, которые поменялись, но еще не были зафиксированы.

'Подготовленное (staged)'
# это измененные файлы, отмеченные для включения в следующий коммит.






""" Практика """

# Основные команды при работе с GIT 

# git init - создает особую (скрытую) папку ".git", 
# в ней содержатся все необходимые файлы репозитория

# git remote add name url - вместо name url указывается https или ssh ссылку.
# Данная команда добавляет удаленный репозиторий, который нах-ся на каком-нибудь сервере, например, чаще всего на Github'е либо на Gitlub'е и тд.

# git pull - при вызове данной команды стягивается изменения с какой-либо ветки.
# Обычно используется git pull origin master, то есть стягиваем с=все изменения с ветки master
 
# git status - показзывает статус файлов проекта, то есть какие файлы изменены, какие ожидают камита и тд

# git add - добавляет файлы в рабочей папке в индекс для дальнейшего камита(commit)
# git add filename - добавляет в индекс filename
# git add . - добавляет все файлы в индекс, которые были изменены

# git commit - добавляет все файлы, которые нах-ся в индексе во внутреннюю базу данных и сохраняет их состояние на данный момент.
# Обычно набирают эту команду вместе с параметром "-m":
# Например: git commit -m 'comment'

# git branch - менеджер веток, который позволяет посмотреть список веток и выбрать необходимую ветку
# git branch name_branch - создает ветку с названием name_branch 

# git checkout name_branch - переключение на ветку name_branch

# git push name_branch - отправка кода в удаленный репозиторий
# git push origin master 

# git reset file_name - удаляет файла file_name из индекса
# 16:57смотреть видео